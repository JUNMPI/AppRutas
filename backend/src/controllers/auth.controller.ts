import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import pool from '../config/database';
import redis from '../config/redis';

export const register = async (req: any, res: any) => {
  const { email, password, fullName, full_name, phone } = req.body;
  
  // Compatibilidad con ambos nombres de campo
  const userFullName = fullName || full_name;
  
  // Log para debugging
  console.log('üìù Intentando registrar usuario:', { 
    email, 
    hasPassword: !!password, 
    fullName: userFullName,
    phone 
  });

  try {
    // Validaciones mejoradas
    if (!email || !password || !userFullName) {
      console.log('‚ùå Campos requeridos faltantes');
      return res.status(400).json({ 
        success: false,
        error: 'Email, contrase√±a y nombre completo son requeridos' 
      });
    }

    // Validar formato de email
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      console.log('‚ùå Email inv√°lido:', email);
      return res.status(400).json({ 
        success: false,
        error: 'Por favor ingresa un email v√°lido' 
      });
    }

    // Validar longitud de contrase√±a
    if (password.length < 8) {
      console.log('‚ùå Contrase√±a muy corta');
      return res.status(400).json({ 
        success: false,
        error: 'La contrase√±a debe tener al menos 8 caracteres' 
      });
    }

    // Validar nombre
    if (userFullName.trim().length < 2) {
      console.log('‚ùå Nombre muy corto');
      return res.status(400).json({ 
        success: false,
        error: 'El nombre debe tener al menos 2 caracteres' 
      });
    }

    // Normalizar email a min√∫sculas
    const normalizedEmail = email.toLowerCase().trim();

    // Verificar si el usuario existe
    console.log('üîç Verificando si el email existe:', normalizedEmail);
    const userExists = await pool.query(
      'SELECT id FROM users WHERE email = $1',
      [normalizedEmail]
    );

    if (userExists.rows.length > 0) {
      console.log('‚ùå Email ya registrado:', normalizedEmail);
      return res.status(400).json({ 
        success: false,
        error: 'El email ya est√° registrado' 
      });
    }

    // Hashear password
    console.log('üîê Hasheando contrase√±a...');
    const passwordHash = await bcrypt.hash(password, 10);

    // Crear usuario con valores por defecto mejorados
    console.log('üíæ Creando usuario en la base de datos...');
    const newUser = await pool.query(
      `INSERT INTO users (email, password_hash, full_name, phone, is_active, email_verified) 
       VALUES ($1, $2, $3, $4, $5, $6) 
       RETURNING id, email, full_name, phone, is_active, email_verified, created_at`,
      [
        normalizedEmail, 
        passwordHash, 
        userFullName.trim(), 
        phone?.trim() || null,
        true,  // Usuario activo por defecto
        false  // Email no verificado por defecto
      ]
    );

    const user = newUser.rows[0];
    console.log('‚úÖ Usuario creado exitosamente:', user.id);

    // Crear token con expiraci√≥n fija
    const token = jwt.sign(
      { id: user.id, email: user.email },
      process.env.JWT_SECRET || 'mi_super_secreto_jwt_2024',
      { expiresIn: '7d' } // 7 d√≠as
    );

    // Guardar sesi√≥n en Redis (si est√° disponible)
    try {
      await redis.setex(
        `session:${user.id}`,
        60 * 60 * 24 * 7, // 7 d√≠as
        JSON.stringify({
          userId: user.id,
          email: user.email,
          fullName: user.full_name,
          token
        })
      );
      console.log('‚úÖ Sesi√≥n guardada en Redis');
    } catch (redisError) {
      console.log('‚ö†Ô∏è Redis no disponible, continuando sin cache');
    }

    // Respuesta exitosa
    res.status(201).json({
      success: true,
      message: 'Usuario creado exitosamente',
      data: {
        user: {
          id: user.id,
          email: user.email,
          fullName: user.full_name,
          phone: user.phone
        },
        token
      }
    });

  } catch (error: any) {
    console.error('‚ùå Error en registro:', error);
    console.error('Detalles del error:', error.message);
    
    // Manejar error de email duplicado de PostgreSQL
    if (error.code === '23505') {
      return res.status(400).json({ 
        success: false,
        error: 'El email ya est√° registrado' 
      });
    }
    
    // Error gen√©rico
    res.status(500).json({ 
      success: false,
      error: 'Error al crear usuario. Por favor intenta de nuevo.',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

export const login = async (req: any, res: any) => {
  const { email, password } = req.body;
  
  console.log('üîë Intento de login para:', email);

  try {
    // Validaciones b√°sicas
    if (!email || !password) {
      return res.status(400).json({ 
        success: false,
        error: 'Email y contrase√±a son requeridos' 
      });
    }

    // Normalizar email
    const normalizedEmail = email.toLowerCase().trim();

    // Buscar usuario
    const result = await pool.query(
      'SELECT * FROM users WHERE email = $1 AND deleted_at IS NULL',
      [normalizedEmail]
    );

    if (result.rows.length === 0) {
      console.log('‚ùå Usuario no encontrado:', normalizedEmail);
      return res.status(401).json({ 
        success: false,
        error: 'Credenciales inv√°lidas' 
      });
    }

    const user = result.rows[0];

    // Verificar si el usuario est√° activo
    if (!user.is_active) {
      console.log('‚ùå Usuario inactivo:', normalizedEmail);
      return res.status(401).json({ 
        success: false,
        error: 'Tu cuenta est√° desactivada. Contacta al soporte.' 
      });
    }

    // Verificar password
    const validPassword = await bcrypt.compare(password, user.password_hash);
    
    if (!validPassword) {
      console.log('‚ùå Contrase√±a incorrecta para:', normalizedEmail);
      return res.status(401).json({ 
        success: false,
        error: 'Credenciales inv√°lidas' 
      });
    }

    // Actualizar √∫ltimo login
    await pool.query(
      'UPDATE users SET last_login = NOW() WHERE id = $1',
      [user.id]
    );

    console.log('‚úÖ Login exitoso para:', user.email);

    // Crear token con expiraci√≥n fija
    const token = jwt.sign(
      { id: user.id, email: user.email },
      process.env.JWT_SECRET || 'mi_super_secreto_jwt_2024',
      { expiresIn: '7d' } // 7 d√≠as
    );

    // Guardar sesi√≥n en Redis (si est√° disponible)
    try {
      await redis.setex(
        `session:${user.id}`,
        60 * 60 * 24 * 7,
        JSON.stringify({
          userId: user.id,
          email: user.email,
          fullName: user.full_name,
          token
        })
      );
    } catch (redisError) {
      console.log('‚ö†Ô∏è Redis no disponible');
    }

    res.json({
      success: true,
      message: 'Login exitoso',
      data: {
        user: {
          id: user.id,
          email: user.email,
          fullName: user.full_name,
          phone: user.phone
        },
        token
      }
    });

  } catch (error: any) {
    console.error('‚ùå Error en login:', error);
    res.status(500).json({ 
      success: false,
      error: 'Error al iniciar sesi√≥n. Por favor intenta de nuevo.',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

export const logout = async (req: any, res: any) => {
  try {
    const userId = req.user?.id;
    
    if (userId) {
      // Eliminar sesi√≥n de Redis (si est√° disponible)
      try {
        await redis.del(`session:${userId}`);
        console.log('‚úÖ Sesi√≥n eliminada de Redis para usuario:', userId);
      } catch (redisError) {
        console.log('‚ö†Ô∏è Redis no disponible');
      }
    }
    
    res.json({ 
      success: true,
      message: 'Sesi√≥n cerrada exitosamente' 
    });
  } catch (error) {
    console.error('‚ùå Error en logout:', error);
    res.status(500).json({ 
      success: false,
      error: 'Error al cerrar sesi√≥n' 
    });
  }
};